---
# Credits

- name: Create Pihole container path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create unbound path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/etc-unbound/unbound.conf.d"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create etc-pihole path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/etc-pihole"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create etc-lighttpd path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/etc-lighttpd"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Rclone config path
  ansible.builtin.file:
    path: "/root/.config/rclone"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Fix Ubuntu DNS
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: "DNSStubListener="
    line: DNSStubListener=no
  when:
    - ansible_facts['os_family'] == 'Ubuntu'

- name: Fix Ubuntu DNS part 2
  ansible.builtin.shell:
    cmd: |
      rm /etc/resolv.conf && ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
  when:
    - ansible_facts['os_family'] == 'Ubuntu'

- name: Unbound configuration
  ansible.builtin.template:
    src: unbound_pihole.j2
    dest: "/home/{{ user_name }}/pihole/etc-unbound/unbound.conf"
    owner: root
    group: root
    mode: "0644"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Download root hints
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: "/home/{{ user_name }}/pihole/etc-unbound/root.hints"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: External Config
  ansible.builtin.template:
    src: external.j2
    dest: "/home/{{ user_name }}/pihole/etc-lighttpd/external.conf"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Copy pem file
  ansible.builtin.copy:
    src: "/etc/letsencrypt/live/{{ ssl_cert }}/cert_privkey_combined.pem"
    dest: "/home/{{ user_name }}/pihole/etc-lighttpd/cert_privkey_combined.pem"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Pihole Config
  ansible.builtin.template:
    src: setup_vars.j2
    dest: /home/{{ user_name }}/pihole/etc-pihole/setupVars.conf
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Create pihole container network
  ansible.builtin.shell:
    cmd: |
      podman network create --subnet 172.16.1.0/29 pihole_net
  when: ansible_facts['os_family'] == 'Debian'

- name: Pihole Service
  ansible.builtin.template:
    src: pihole.service.j2
    dest: "/etc/systemd/system/pihole.service"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Unbound Service
  ansible.builtin.template:
    src: unbound_container.service.j2
    dest: "/etc/systemd/system/unbound_container.service"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Enable unbound
  ansible.builtin.systemd:
    name: unbound_container.service
    enabled: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Enable Pihole
  ansible.builtin.systemd:
    name: pihole.service
    enabled: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Create Pihole DB backups path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/pihole/database_backups"
    state: directory
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Backup Database Script
  ansible.builtin.template:
    src: backup_db.j2
    dest: "/usr/local/bin/backup_db.sh"
    owner: root
    group: root
    mode: "0644"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Backup Pihole Daily
  ansible.builtin.cron:
    name: "Backup Pihole DB"
    special_time: daily
    job: /bin/bash /usr/local/bin/backup_db.sh

- name: Rclone config file
  ansible.builtin.template:
    src: rclone_config.j2
    dest: "/root/.config/rclone/rclone.conf"
    owner: root
    group: root
    mode: "0644"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Custom Domains
  ansible.builtin.lineinfile:
    path: "/home/{{ user_name }}/pihole/etc-pihole/custom.list"
    line: "{{ item }}"
    create: "yes"
  loop: "{{ domains_list }}"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns tcp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns forward tcp
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    destination: "172.16.1.2"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow http forward tcp
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    destination_port: "80"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    destination: "172.16.1.2"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow https forward tcp
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    destination_port: "443"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    destination: "172.16.1.2"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns forward udp
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: udp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    destination: "172.16.1.2"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns tcp ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "53"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns udp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: udp
    destination_port: "53"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow dns udp ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: udp
    destination_port: "53"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow http
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "80"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow http ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "80"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow https
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Allow https ipv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "443"
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Save Iptables Rules
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Save Iptables Rules ipv6
  community.general.iptables_state:
    ip_version: ipv6
    table: filter
    state: saved
    path: /etc/iptables/rules.v6
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Set DNS server to loopback
  ansible.builtin.lineinfile:
    path: /etc/network/interfaces
    regexp: "^dns-nameservers "
    line: dns-nameservers 127.0.0.1
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Set DNS server to loopback 2
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: "^DNS="
    line: DNS=127.0.0.1
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: Fix resolv conf
  ansible.builtin.template:
    src: resolv.j2
    dest: "/etc/resolv.conf"
  when:
    - ansible_facts['os_family'] == 'Debian'
