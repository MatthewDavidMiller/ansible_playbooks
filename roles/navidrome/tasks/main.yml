- name: Install davfs2
  ansible.builtin.apt:
    name: davfs2
    state: present
  when: ansible_facts['distribution'] == 'Debian'

- name: Create navidrome container network
  ansible.builtin.shell:
    cmd: |
      podman network create --subnet 172.16.1.24/29 navidrome_container_net
  ignore_errors: true
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: Create Navidrome container path
  ansible.builtin.file:
    path: "{{ navidrome_path }}"
    state: directory
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: Create Navidrome container music path
  ansible.builtin.file:
    path: "{{ navidrome_path }}/music"
    state: directory
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: Create Navidrome container data path
  ansible.builtin.file:
    path: "{{ navidrome_path }}/data"
    state: directory
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: davfs2 config
  ansible.builtin.template:
    src: "davfs2_secrets.j2"
    dest: "/etc/davfs2/secrets"
    mode: "0600"
  when: ansible_facts['distribution'] == 'Debian'

- name: Mount nextcloud webdav
  ansible.posix.mount:
    path: "{{ navidrome_path }}/music"
    src: "{{ nextcloud_webdav_path }}/Music"
    fstype: davfs
    opts: ro,auto
    state: mounted
  when: ansible_facts['distribution'] == 'Debian'

- name: Navidrome Service
  ansible.builtin.template:
    src: navidrome_container.service.j2
    dest: "/etc/systemd/system/navidrome_container.service"
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: Enable Navidrome
  ansible.builtin.systemd:
    name: navidrome_container.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: Navidrome script
  ansible.builtin.template:
    src: navidrome_container.sh.j2
    dest: "/usr/local/bin/navidrome_container.sh"
    owner: root
    group: root
    mode: "0770"
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: rclone mount music script
  ansible.builtin.template:
    src: rclone_mount_music.sh.j2
    dest: "/usr/local/bin/rclone_mount_music.sh"
    owner: root
    group: root
    mode: "0770"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: check music rclone script
  ansible.builtin.template:
    src: check_music_rclone.sh.j2
    dest: "/usr/local/bin/check_music_rclone.sh"
    owner: root
    group: root
    mode: "0770"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: rclone mount music service
  ansible.builtin.template:
    src: rclone_mount_music.service.j2
    dest: "/etc/systemd/system/rclone_mount_music.service"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable rclone mount music service
  ansible.builtin.systemd:
    name: rclone_mount_music.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: check music rclone service
  ansible.builtin.template:
    src: check_music_rclone.service.j2
    dest: "/etc/systemd/system/check_music_rclone.service"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: check music rclone timer
  ansible.builtin.template:
    src: check_music_rclone.timer.j2
    dest: "/etc/systemd/system/check_music_rclone.timer"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable check music rclone timer
  ansible.builtin.systemd:
    name: check_music_rclone.timer
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Install zip and jq packages
  community.general.pacman:
    name: "{{ package }}"
    update_cache: true
    state: latest
  loop:
    - zip
    - jq
  loop_control:
    loop_var: package
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Backup navidrome script
  ansible.builtin.template:
    src: backup_navidrome.sh.j2
    dest: "/usr/local/bin/backup_navidrome.sh"
    owner: "{{ user_name }}"
    group: root
    mode: "0770"
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'

- name: Backup navidrome daily
  ansible.builtin.cron:
    name: "Backup navidrome daily"
    special_time: daily
    job: /usr/bin/bash /usr/local/bin/backup_navidrome.sh
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Archlinux'
