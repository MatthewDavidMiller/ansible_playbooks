#!/bin/bash

# === Configuration ===
NEXTCLOUD_BORG_REMOTE="Nextcloud:{{ nextcloud_paperless_backup_location }}"
BORG_REPO="{{ nextcloud_borg_backup_path }}"
timestamp=$(date +%Y_%m_%d)
EXPORT_DIR="{{ paperless_export_path }}/${timestamp}"
CONTAINER_EXPORT_DIR="/usr/src/paperless/export/${timestamp}"

# === Truncate Logs ===
/usr/bin/truncate -s 0 /var/log/borg-backup.log
/usr/bin/truncate -s 0 /var/log/borg-prune.log
/usr/bin/truncate -s 0 /var/log/rclone-nextcloud-borg.log

# === Create Borg Repository Directory ===
# Check if parent directory exists
# Verify permissions: ls -ld {{ nextcloud_borg_backup_path }}
# Ensure {{ nextcloud_borg_backup_path }} is a valid, writable path (e.g., not an unmounted network filesystem)
if [ ! -d "{{ nextcloud_borg_backup_path }}" ]; then
    /usr/bin/mkdir -p "{{ nextcloud_borg_backup_path }}" || {
        echo "Failed to create Borg parent directory: {{ nextcloud_borg_backup_path }}" >&2
        exit 1
    }
fi

# Check if repository directory exists to ensure idempotency
if [ ! -d "$BORG_REPO" ]; then
    /usr/bin/mkdir -p "$BORG_REPO" || {
        echo "Failed to create Borg repository directory: $BORG_REPO" >&2
        exit 1
    }
fi

# === Ensure Borg is initialized ===
if [ ! -f "$BORG_REPO/config" ]; then
    /usr/bin/borg init --encryption=none "$BORG_REPO" > /var/log/borg-backup.log 2>&1 || {
        echo "Failed to initialize Borg repository: $BORG_REPO" >&2
        cat /var/log/borg-backup.log >&2
        exit 1
    }
fi

# === Dump Paperless DB ===
# Note: May produce collation mismatch warning due to host OS having newer glibc than container.
# To verify collation: podman exec postgres psql -U {{ paperless_database_user }} {{ paperless_database_name }} -c "SHOW LC_COLLATE;"
/usr/bin/podman exec postgres pg_dump -U {{ paperless_database_user }} {{ paperless_database_name }} \
  > "/paperless_db_${timestamp}.sql"

# === Dump Nextcloud DB ===
# Note: May produce collation mismatch warning due to host OS having newer glibc than container.
# To verify collation: podman exec postgres psql -U {{ nextcloud_database_user }} {{ nextcloud_database_name }} -c "SHOW LC_COLLATE;"
/usr/bin/podman exec postgres pg_dump -U {{ nextcloud_database_user }} {{ nextcloud_database_name }} \
  > "/nextcloud_db_${timestamp}.sql"

# === Create Export Directory for Paperless Documents ===
# Check if directory exists to ensure idempotency before creating
# Ensure {{ paperless_export_path }} exists and has ownership/permissions matching the paperless container's user (e.g., paperless:paperless)
# Verify parent directory: ls -ld {{ paperless_export_path }}
# Verify mount: podman inspect paperless | grep -i mount (should show -v {{ paperless_export_path }}:/usr/src/paperless/export)
if [ ! -d "{{ paperless_export_path }}" ]; then
    echo "Parent directory does not exist: {{ paperless_export_path }}" >&2
    exit 1
fi
if [ ! -d "$EXPORT_DIR" ]; then
    /usr/bin/mkdir -p "$EXPORT_DIR" || {
        echo "Failed to create export directory: $EXPORT_DIR" >&2
        exit 1
    }
    # Copy ownership and permissions from parent directory
    /usr/bin/chown --reference={{ paperless_export_path }} "$EXPORT_DIR" || {
        echo "Failed to set ownership for $EXPORT_DIR" >&2
        exit 1
    }
    /usr/bin/chmod --reference={{ paperless_export_path }} "$EXPORT_DIR" || {
        echo "Failed to set permissions for $EXPORT_DIR" >&2
        exit 1
    }
fi

# === Export Paperless Documents ===
/usr/bin/podman exec paperless document_exporter "$CONTAINER_EXPORT_DIR" || {
    echo "Paperless document export failed for directory: $CONTAINER_EXPORT_DIR" >&2
    exit 1
}

# === Borg Backup for Paperless and Nextcloud (Documents + DBs) ===
/usr/bin/borg create "$BORG_REPO::backup-${timestamp}" \
    "$EXPORT_DIR" \
    "/paperless_db_${timestamp}.sql" \
    "/nextcloud_db_${timestamp}.sql" \
    --compression=lz4 \
    > /var/log/borg-backup.log 2>&1 || {
        echo "Borg backup failed for archive: backup-${timestamp}" >&2
        cat /var/log/borg-backup.log >&2
        exit 1
    }

# === Prune Borg Backups (Keep 30 days) ===
/usr/bin/borg prune --keep-daily=30 "$BORG_REPO" \
    > /var/log/borg-prune.log 2>&1 || {
        echo "Borg prune failed for repository: $BORG_REPO" >&2
        cat /var/log/borg-prune.log >&2
        exit 1
    }

# === Rclone Borg Repo to Nextcloud ===
/usr/bin/rclone sync "$BORG_REPO" "${NEXTCLOUD_BORG_REMOTE}" \
    --log-level INFO --log-file=/var/log/rclone-nextcloud-borg.log || {
        echo "Rclone sync failed to $NEXTCLOUD_BORG_REMOTE" >&2
        cat /var/log/rclone-nextcloud-borg.log >&2
        exit 1
    }

# === Cleanup ===
if [ $? -eq 0 ]; then
    /usr/bin/rm -rf "$EXPORT_DIR"
    /usr/bin/rm "/paperless_db_${timestamp}.sql"
    /usr/bin/rm "/nextcloud_db_${timestamp}.sql"
else
    echo "Backup or upload failed. Temporary files retained." >&2
    exit 1
fi
