# Credits
# https://www.decodingdevops.com/ansible-when-file-exists/
# https://techviewleo.com/list-of-ansible-os-family-distributions-facts/
# https://www.jeffgeerling.com/blog/2021/taking-control-pi-poe-hats-overly-aggressive-fan

---
- name: Disable wifi and bluetooth for pi
  ansible.builtin.blockinfile:
    path: "/boot/config.txt"
    create: "yes"
    block: |
      dtoverlay=disable-wifi
      dtoverlay=disable-bt
    marker: "{mark}"
    marker_begin: "# Disable wifi and bluetooth"
    marker_end: "#=================================================================================================================="
  when: ansible_facts['os_family'] == 'RedHat'

- name: Adjust POE hat speeds for pi
  ansible.builtin.blockinfile:
    path: "/boot/config.txt"
    create: "yes"
    block: |
      dtparam=poe_fan_temp0=50000
      dtparam=poe_fan_temp1=60000
      dtparam=poe_fan_temp2=70000
      dtparam=poe_fan_temp3=80000
    marker: "{mark}"
    marker_begin: "# PoE Hat Fan Speeds"
    marker_end: "#=================================================================================================================="
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install packages OpenWrt
  community.general.opkg:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  when: ansible_facts['os_family'] == 'OpenWrt'

- name: Install rclone
  ansible.builtin.yum:
    name: rclone
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install screen
  ansible.builtin.yum:
    name: screen
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install cronie
  ansible.builtin.yum:
    name: cronie
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install podman
  ansible.builtin.yum:
    name: podman
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install python
  ansible.builtin.yum:
    name: python3
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Rclone config path
  ansible.builtin.file:
    path: "/root/.config/rclone"
    state: directory
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable cron
  ansible.builtin.systemd:
    name: crond.service
    enabled: yes
  when: ansible_facts['os_family'] == 'RedHat'

- name: Rclone config file
  ansible.builtin.template:
    src: rclone_config.j2
    dest: "/root/.config/rclone/rclone.conf"
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set default action for public to drop
  ansible.posix.firewalld:
    zone: public
    target: DROP
    permanent: yes
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create new zone and set it to drop
  ansible.posix.firewalld:
    zone: homelab
    permanent: yes
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set zone to drop
  ansible.posix.firewalld:
    zone: homelab
    target: DROP
    permanent: yes
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set ipv4 source for zone
  ansible.posix.firewalld:
    zone: homelab
    source: "{{ network_prefix }}"
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set ipv6 source for zone
  ansible.posix.firewalld:
    zone: homelab
    source: "fe80::/10"
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable icmp block inversion
  ansible.posix.firewalld:
    zone: homelab
    icmp_block_inversion: yes
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Allow SSH
  ansible.posix.firewalld:
    zone: homelab
    service: ssh
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Allow icmp
  ansible.posix.firewalld:
    zone: homelab
    icmp_block: echo-request
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable SSH in default zone
  ansible.posix.firewalld:
    zone: public
    service: ssh
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable SSH in default zone 2
  ansible.posix.firewalld:
    zone: public
    port: 22/tcp
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable cockpit in default zone
  ansible.posix.firewalld:
    zone: public
    service: cockpit
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable dhcpv6-client in default zone
  ansible.posix.firewalld:
    zone: public
    service: dhcpv6-client
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable mdns in default zone
  ansible.posix.firewalld:
    zone: public
    service: mdns
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: SSH configuration
  ansible.builtin.template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == 'RedHat'

- name: SELinux Allow virt to sandbox use netlink
  ansible.builtin.shell:
    cmd: |
      setsebool -P virt_sandbox_use_netlink 1
  when: ansible_facts['os_family'] == 'RedHat'

- name: SELinux Allow domain to kernel load modules
  ansible.builtin.shell:
    cmd: |
      setsebool -P domain_kernel_load_modules 1
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create homelab container network
  ansible.builtin.shell:
    cmd: |
      podman network create -d macvlan -o parent={{ interface_name }} --gateway={{ homelab_gateway }} --subnet {{ homelab_network }} homelab
  ignore_errors: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create macvlan
  ansible.builtin.shell:
    cmd: |
      nmcli connection add con-name {{ macvlan_name }} type macvlan ifname {{ macvlan_name }} ipv4.addresses {{ macvlan_ip_address }} dev {{ interface_name }} mode bridge
      nmcli connection modify {{ macvlan_name }} ipv4.method manual
      nmcli connection modify {{ macvlan_name }} ipv4.routes "{{ nextcloud_ip_address }}/32"
      nmcli connection up {{ macvlan_name }}
  ignore_errors: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: Update System Script
  ansible.builtin.template:
    src: update_system.j2
    dest: "/usr/local/bin/update_system.sh"
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Login to Docker Service
  ansible.builtin.template:
    src: login_to_docker.j2
    dest: "/etc/systemd/system/login_to_docker.service"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable Login to Docker Service
  ansible.builtin.systemd:
    name: login_to_docker.service
    enabled: yes
  when: ansible_facts['os_family'] == 'RedHat'

- name: Update System Weekly
  ansible.builtin.cron:
    name: "Update System Weekly"
    minute: 0
    hour: 4
    weekday: 6
    job: /bin/bash /usr/local/bin/update_system.sh
  when: ansible_facts['os_family'] == 'RedHat'
