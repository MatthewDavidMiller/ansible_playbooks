# Credits
# https://www.decodingdevops.com/ansible-when-file-exists/
# https://techviewleo.com/list-of-ansible-os-family-distributions-facts/

---
- name: Disable wifi and bluetooth for pi
  ansible.builtin.blockinfile:
    path: "/boot/config.txt"
    block: |
      dtoverlay=disable-wifi
      dtoverlay=disable-bt
    marker: "{mark}"
    marker_begin: "# Disable wifi and bluetooth"
    marker_end: "#=================================================================================================================="
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install packages OpenWrt
  community.general.opkg:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  when: ansible_facts['os_family'] == 'OpenWrt'

- name: Install rclone
  community.general.rpm_ostree_pkg:
    name: rclone
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install cronie
  community.general.rpm_ostree_pkg:
    name: cronie
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Rclone config path
  ansible.builtin.file:
    path: "/root/.config/rclone"
    state: directory
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable cron
  ansible.builtin.systemd:
    name: crond.service
    enabled: yes
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable zerzere service
  ansible.builtin.systemd:
    name: zezere_ignition.service
    enabled: no
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable zerzere timer
  ansible.builtin.systemd:
    name: zezere_ignition.timer
    enabled: no
  when: ansible_facts['os_family'] == 'RedHat'

- name: Rclone config file
  ansible.builtin.template:
    src: rclone_config.j2
    dest: "/root/.config/rclone/rclone.conf"
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set default action for public to drop
  ansible.posix.firewalld:
    zone: public
    target: DROP
    permanent: yes
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create new zone and set it to drop
  ansible.posix.firewalld:
    zone: homelab
    permanent: yes
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set zone to drop
  ansible.posix.firewalld:
    zone: homelab
    target: DROP
    permanent: yes
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set ipv4 source for zone
  ansible.posix.firewalld:
    zone: homelab
    source: "{{ network_prefix }}"
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Set ipv6 source for zone
  ansible.posix.firewalld:
    zone: homelab
    source: "fe80::/10"
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable icmp block inversion
  ansible.posix.firewalld:
    zone: homelab
    icmp_block_inversion: yes
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Allow SSH
  ansible.posix.firewalld:
    zone: homelab
    service: ssh
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Allow icmp
  ansible.posix.firewalld:
    zone: homelab
    icmp_block: echo-request
    permanent: yes
    state: enabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable SSH in default zone
  ansible.posix.firewalld:
    zone: public
    service: ssh
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable dhcpv6-client in default zone
  ansible.posix.firewalld:
    zone: public
    service: dhcpv6-client
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable mdns in default zone
  ansible.posix.firewalld:
    zone: public
    service: mdns
    permanent: yes
    state: disabled
  when: ansible_facts['os_family'] == 'RedHat'

- name: SSH configuration
  ansible.builtin.template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config.d/01-sshd_custom.conf
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create homelab container network
  ansible.builtin.shell:
    cmd: |
      podman network create -d macvlan -o parent={{ interface_name }} --gateway={{ homelab_gateway }} --subnet {{ homelab_network }} homelab
  ignore_errors: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install K3s
  ansible.builtin.shell:
    cmd: |
      curl -sfL https://get.k3s.io | sh -
  ignore_errors: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable podman service
  ansible.builtin.systemd:
    name: podman.service
    enabled: yes
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create kubernetes path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/kubernetes"
    state: directory
    owner: root
    group: root
  when: ansible_facts['os_family'] == 'RedHat'
